WinEQ on idea reaali-aikaisesta graafisesta taajuuskorjaimesta, jota aloin netistä
löytämieni lähdekoodien avulla soveltamaan käytännössä 90-luvun lopussa halutessani
oppia enemmän DSP-, Delphi- ja Windowsin Wave-API-ohjelmoinnista. Pienenä haavena oli ehkä saada se julkaistua myös esim. Suomen suurimman tietokonelehden Apajalla, mitä tietoa olisi sitten voinut käyttää esim. ansioluettelossa tms. yhteydessä. DSP tarkoittaa Digital Signal Processing:ia eli digitaalista signaalin käsittelyä ja Wave-API (Application Programming Interface) Windowsin ääniaalto-laitteen ohjelmointirajapintaa. Kaikki "projektissa" käytetyt ohjelmat ja lähdekoodit ovat joko PD:tä (Public Domain) tai ilmaisia, kuten Delphi 6 jonka sain erään lehden kylkiäis-CD:ltä, paitsi Motorolan 'Digital Stereo 10-Band Graphic Equalizer Using the DSP56001' -julkaisu, joka ei taida olla mutta on kuitenkin netistä vapaasti saatavilla.    

Graafinen taajuuskorjain on laite jolla äänen eri taajuskomponentteja voidaan vahvistaa tai vaimentaa liukusäätimillä. Graafinen tässä yhteydessä tarkoittaa sitä että jos liukusäätimien välille vedettäisin viivat, se kuvaisi suurinpiirtein äänen taajuustoistokäyrää. 

"Projektin" lähtökohtana oli netistä löydetty lähdekoodi fft.pas, jolla puskurillinen ääni-dataa voidaan muuntaa normaalista aikaesitys-muodosta (time domain) taajusesitys-muotoon (frequency-domain) FFT:tä käyttäen. Tuloksesta voidaan piirtää esim. käyrä, joka kuvaa äänen taajusspektriä. Esim. vahvistintesteissä esitettävät käyrät ovat tällaisia, vasemmalla matalat taajuudet ja oikealla korkeat. Puskurissa oleva data on sijoittunut niin, että indeksissä 0 on puskurin koko tavuina ja indeksistä 1 indeksiin koko/2 taajuuksien amplitudit. Korkein taajuus indeksissä koko/2 on korkeintaan näytteenottotaajuus/2 ja loput puskurista on ensimmäisen puolen peilikuva. Toisena lähtökohtana oli (myös netistä löydetty) echo.pas, joka kaiuttaa äänimikserin sisääntulon ulostulolle.

FFT-algoritmi (Fast Fourier Transform), ja sen yleisin Cooley-Tukey muunnos (1965) kuitenkin tiedossa jo 1800-luvulta lähtien, on tehokas algoritmi joka hyödyntää DFT:tä (Discrete Fourier Transform), joka puolestaan on Fourier Transform (lukumuunnos-yhtälö) ja jonka  kehitti ranskalainen 1700-luvulla elänyt lämmön johtumista tutkinut matemaatikko ja fyysikko Jean-Baptiste Fourier. Fourier Transform:illa on tärkeää käyttöä monella eri tieteen alalla kuten matematiikassa, fysiikassa, tilastotieteessä, lääketieteessä, avaruustutkimuksessa, öljynetsinnässä yms.  

Alunperin ajatuksena oli siis että WinEQ olisi reaali-aikainen, ääni-mikseristä otettu esim. CD-soittimen sisääntulo menee samantien ulostulolle, mutta siihen fft.pas osoittautui aivan liian hitaaksi. Lisäksi jokaisen äänilohkon (muistilohko) rajapintaan muodostui korvin kuultava napsahdus FFT:n signaalia muokkaavan luonteen vuoksi. Kun normaalin CD-tasoisen äänen (44100kHz) bittivirtanopeus on n. 150kt ja puskurin koko, jonka pitää olla 2:en potenssia, on esim. 8192 tavua niin napsahduksia oli 54 millisekunnin välein jonka voi kuvitella vähintäänkin häiritseväksi. 

Oli siis etsittävä muu ratkaisu joita tiesin olevan olemassa, semminkin löydettyäni ja luettuani mm. pdf-book joka on ilmainen sähköinen pdf-kirja DSP:stä, ja netistä löytyikin sitten (myös ilmainen) Audio-EQ-Cookbook niminen tekstitiedosto joka on kokoelma kaavoja yleisimmin käytettyjen IIR-suodinkertoimien laskemiseksi sijoitettavaksi muunnosyhtälöön: 

y[n] = (b0/a0)*x[n] + (b1/a0)*x[n-1] + (b2/a0)*x[n-2] - (a1/a0)*y[n-1] - (a2/a0)*y[n-2]

missä x on sisääntulopuskuri, y on ulostulopuskuri, n on puskurin indeksi ja a sekä b lasketut kertoimet esim. kaistanpäästösuotimelle. Soveltaessani sitten 10 kpl näitä yhtälöitä, yksi jokaista taajuusaluetta kohden, nopeus parani huomattavasti vaikka ei ollutkaan vielä käyttökelpoista reaali-aikaisuutta silmälläpitäen. Vasta kun optimoin yhtälöt vielä konekielelle, prosessorin liukulukuyksikköä (FPU) hyödyntäviksi, suorituskyvyssä voitiin puhua tosiaikaisuudesta sillä yhden äänilohkon käsittelemiseen kului enää vaivaiset 25 mikrosekuntia ja käyttö oli hidastelematonta 233MHz:in Pentiumissani.  Koska yhtälössä esiintyvät n-1 ja n-2 tarkoittavat käsittelyssä olevan indeksin edeltäviä indeksejä, joita ei puskurien välisessä rajapinnassa enää ole käytössä, häiritsevät napsahdukset kuuluivat yhä äänessä. Ratkaisu ongelmaan löytyi Motorolan julkaisusta. Siinä, ja myös yleisestikin käytössä, oleva tekniikka on nimeltään circular-buffer missä näytteet kierrätetään kolmen näytteen kokoisessa puskurissa ja jossa käytössä on aina näyte n, n-1 ja n-2. 

Tehtävä oli suoritettu.   

Kun sain nämä toiminnalliset ongelmat ratkaistua, aloin lisäämään joitain lisäominaisuuksia WinEQ:n kuten analogiset VU-mittarit, Gain-säätimen (Vahvistus), parametrisiä ominaisuuksia ja viimeisimpänä phaser-efektin sekä LED-mittarit. VU-mittari (Voltage Unit) on jo 40-luvulla kehitetty mittari, jolla voidaan tarkkailla signaalin voimakkuutta erityisesti äänitettäessä. WinEQ:ssa niillä voi tarkkailla myös tasoa ja näytettävät arvot lasketaan kaavalla 20*log10(ka/32768), missä ka=näytteiden keskiarvo. Parametrisuudella tarkoitetaan että suotimien parametrejä, kuten Q-arvoa, voidaan säätää. Q-arvo on elektroniikassa käytettävä termi jolla tarkoitetaan kelan hyvyyttä (Quality), eli mitä suurempi Q-arvo sitä pienemmät sen häviöt. Digitaalisissa suotimissa Q-arvo ei tarkoita aivan samaa, koska ne ovat käytännössä häviöttömiä, vaan sillä voidaan säätää suotimen vaikutusaluetta ts. kuinka leveä tai kapea suotimen vastekäyrä on. Gain säädin säätää vahvistusta kaavalla näyte*10^+-(dB/20), jossa dB on säätimestä saatava arvo. 